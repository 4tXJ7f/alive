Name: mulConstConst
Pre: IsNormal(C0 * C)
%f = fmul %X, C0
%r = fmul %f, C
  =>
%r = fmul %X, (C0 * C)

Name: invConstMulConst
Pre: hasOneUse(%f) && isNormal(C0 * C)
%f = fdiv C0, %X
%r = fmul %f, C
  =>
%r = fdiv (C0 * C), %X

Name: divConstMulConst
Pre: isNormal(C0 * C)
%f = fdiv %X, C1
%r = fmul %f, C
  =>
%r = fmul (C / C1), %X

Name: divConstMulConst
Pre: !isNormal(C0 * C)
%f = fdiv %X, C1
%r = fmul %f, C
  =>
%r = fdiv %X, (C1 / C)

Name: sqrSqrt
Pre: allowReassociate
%s = fmul %X, %X
%r = sqrt %s

Name: mulLog2OfHalf
Pre: allowReassociate
%h = fmul 0.5, %Y
%l = log2 %h
%r = fmul %X, %l
  =>
%l = log2 %Y
%m = fmul %X, %l
%r = fsub %m, %X

Name: PromConstCast
Pre: hasOneUse(%X) && CI == int(C) && WillNotOverflowSignedAdd(%X, CI)
%r = fadd (sitofp %X), C
  =>
%i = sitofp (add %X, CI)

Name: PromAddCast
Pre: hasOneUse(%X) && hasOneUse(%Y) && WillNotOverflowSignedAdd(%X, CI)
%r = fadd (sitofp %X), (sitofp %Y)
  =>
%i = sitofp (add %X, %Y)

Name: DivConstToReciprocal
Pre: hasExactInverse(C)
%r = fdiv %X, C
  =>
%r = fmul %X, 1.0 / C


; (x * y) +/- (x * z) => x * (y +/- z)


Name: factorAddMul:AddSub:471-1
%a = fmul %x, %y
%b = fmul %x, %z
%r = fadd fast %a, %b
  =>
%c = fadd %y, %z
%r = fmul %x, %c


Name: factorAddMul:AddSub:473-1
%a = fmul %y, %x
%b = fmul %z, %x
%r = fadd fast %a, %b
  =>
%c = fadd %y, %z
%r = fmul %x, %c


Name: factorAddMul:AddSub:471-2/473-2
%a = fmul %x, %y
%b = fmul %z, %x
%r = fadd fast %a, %b
  =>
%c = fadd %y, %z
%r = fmul %x, %c


Name: factorSubMul:AddSub:471-1
%a = fmul %x, %y
%b = fmul %x, %z
%r = fsub fast %a, %b
  =>
%c = fsub %y, %z
%r = fmul %x, %c


Name: factorSubMul:AddSub:473-1
%a = fmul %y, %x
%b = fmul %z, %x
%r = fsub fast %a, %b
  =>
%c = fsub %y, %z
%r = fmul %x, %c


Name: factorSubMul:AddSub:471-2/473-2
%a = fmul %x, %y
%b = fmul %z, %x
%r = fsub fast %a, %b
  =>
%c = fsub %y, %z
%r = fmul %x, %c


; (y / x) +/- (z / x) => (y +/- z) /x


Name: factorAddDiv:AddSub:480
%a = fdiv %y, %x
%b = fdiv %z, %x
%r = fadd fast %a, %b
  =>
%c = fadd %y, %z
%r = fdiv %c, %x


Name: factorSubDiv:AddSub:480
%a = fdiv %y, %x
%b = fdiv %z, %x
%r = fsub fast %a, %b
  =>
%c = fsub %y, %z
%r = fdiv %c, %x

Name: MulConst:MulDivRem:494
Pre: isNormal(C0 * C)
%a = fmul %x, C0
%r = fmul fast %a, C
  =>
%r = fmul fast %x, C0 * C
